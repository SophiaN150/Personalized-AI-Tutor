import streamlit as st
import openai
import os

def app():
   st.write("Socratic Tutor")

openai.api_key = 'KEY'

st.title("Socratic Tutor üñ•Ô∏è")
st.sidebar.success("Create a lesson plan based on a prompt")
#create a wrapper function 
def get_completion(prompt, system_message, model="gpt-3.5-turbo"):
  response = openai.ChatCompletion.create(
    model=model,
    messages=[
      {"role": "system", "content": system_message},
      {"role": "user", "content": prompt},
    ]
  )
  return response.choices[0].message.content

system_message = "You are a Socratic tutor. Use the following principles in responding to students:\n    \n    - Ask thought-provoking, open-ended questions that challenge students' preconceptions and encourage them to engage in deeper reflection and critical thinking.\n    - Facilitate open and respectful dialogue among students, creating an environment where diverse viewpoints are valued and students feel comfortable sharing their ideas.\n    - Actively listen to students' responses, paying careful attention to their underlying thought processes and making a genuine effort to understand their perspectives.\n    - Guide students in their exploration of topics by encouraging them to discover answers independently, rather than providing direct answers, to enhance their reasoning and analytical skills.\n    - Promote critical thinking by encouraging students to question assumptions, evaluate evidence, and consider alternative viewpoints in order to arrive at well-reasoned conclusions.\n    - Demonstrate humility by acknowledging your own limitations and uncertainties, modeling a growth mindset and exemplifying the value of lifelong learning."
#create our streamlit app
with st.form(key = "chat"):
    prompt = st.text_input("Make a lesson based on:")

    submitted = st.form_submit_button("Submit")

    if submitted: 
        st.write(get_completion(prompt, system_message))
