from youtube_transcript_api import YouTubeTranscriptApi
import urllib.parse
import streamlit as st
import os
import openai
from openai import OpenAI



client = OpenAI(api_key='apikeyhere')

def get_transcript(video_url):
    # Parse the URL and extract the video ID
    transcript_text = ""
    url_data = urllib.parse.urlparse(url)
    query = urllib.parse.parse_qs(url_data.query)
    video_id = query["v"][0]

    print(video_id)  # Outputs: -uleG_Vecis

    # Get the transcript
    transcript = YouTubeTranscriptApi.get_transcript(video_id)
    # Print the transcript
    for entry in transcript:
        transcript_text += entry['text']
    
    return transcript_text

# Takes the transcription of the meeting and returns a summary of it via text completions
def abstract_summary_extraction(transcription):
    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        temperature=0,
        messages=[
            {
                "role": "system",
                "content": "You are a highly skilled AI trained in language comprehension and summarization. I would like you to read the following text and summarize it into a concise abstract paragraph. Aim to retain the most important points, providing a coherent and readable summary that could help a person understand the main points of the discussion without needing to read the entire text. Please avoid unnecessary details or tangential points."
            },
            {
                "role": "user",
                "content": transcription
            }
        ]
    )
    return response.choices[0].message.content

st.title("Youtube Quiz Generator ðŸŽ¥")
st.sidebar.success("A quiz will be cretaed based on the video transcript")

# Generate a text completion
def get_completion(prompt, model="gpt-3.5-turbo"):
  completion= client.chat.completions.create(
      model=model,
      messages=[
          {
      "role": "system",
      "content": "You are able to generate three quiz questions based on the following text. Please generate three  multiple-choice questions with four possible answers, one of which is correct. The question should be based on the most important point in the text. The correct answer to the questions should be bolded at the bottom of the question. The other three answers should be plausible distractors that could be true but are not directly supported by the text. The question should be clear and concise, and the answers should be plausible enough to make the question challenging."
    },
    {
      "role": "user",
      "content": prompt
    }
      ]
  )
  return completion.choices[0].message.content

# create our streamlit app
with st.form(key = "chat"):
    url = st.text_input("Enter the Youtube link: ") 
    
    submitted = st.form_submit_button("Generate Quiz Questions")
    
    if submitted:
        VIDEO_URL = url
        st.video(VIDEO_URL)
        st.write(get_completion(get_transcript(url)))
